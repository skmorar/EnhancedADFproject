{
	"name": "df_scd_examples",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_empl_source_scd2",
						"type": "DatasetReference"
					},
					"name": "Source"
				},
				{
					"dataset": {
						"referenceName": "ds_empl_target_scd2",
						"type": "DatasetReference"
					},
					"name": "Target"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_empl_target_scd2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_empl_target_scd2",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "srchash"
				},
				{
					"name": "srctg"
				},
				{
					"name": "exists1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "exists2"
				},
				{
					"name": "exists3"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          Phone as string,",
				"          IsActive as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Source",
				"source(output(",
				"          ID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          Phone as string,",
				"          IsActive as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Target",
				"Source derive(hash = md5(ID,FirstName,LastName,Email,Phone)) ~> srchash",
				"Target derive(hash = md5(ID,FirstName,LastName,Email,Phone)) ~> srctg",
				"srchash, srctg exists(srchash@hash == srctg@hash,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive(IsActive = 1) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          ID,",
				"          FirstName,",
				"          LastName,",
				"          Email,",
				"          Phone,",
				"          IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"srctg, srchash exists(Target@ID == Source@ID,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists2",
				"exists2, srchash exists(srctg@hash == srchash@hash,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists3",
				"exists3 derive(IsActive = 0) ~> derivedColumn2",
				"derivedColumn2 alterRow(updateIf(true())) ~> alterRow1",
				"alterRow1 select(mapColumn(",
				"          ID,",
				"          FirstName,",
				"          LastName,",
				"          Email,",
				"          Phone,",
				"          IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}